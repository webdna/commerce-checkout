{% extends "checkout/_layout" %}

{% set step = 'info' %}

{% block content %}

		
				{# <button type="button" class="flex items-center justify-center w-full py-2 text-white bg-black border border-transparent rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2">
				  <span class="sr-only">Pay with Apple Pay</span>
				  <svg class="w-auto h-5" fill="currentColor" viewBox="0 0 50 20">
					<path d="M9.536 2.579c-.571.675-1.485 1.208-2.4 1.132-.113-.914.334-1.884.858-2.484C8.565.533 9.564.038 10.374 0c.095.951-.276 1.884-.838 2.579zm.829 1.313c-1.324-.077-2.457.751-3.085.751-.638 0-1.6-.713-2.647-.694-1.362.019-2.628.79-3.323 2.017-1.429 2.455-.372 6.09 1.009 8.087.676.99 1.485 2.075 2.552 2.036 1.009-.038 1.409-.656 2.628-.656 1.228 0 1.58.656 2.647.637 1.104-.019 1.8-.99 2.475-1.979.771-1.122 1.086-2.217 1.105-2.274-.02-.019-2.133-.828-2.152-3.263-.02-2.036 1.666-3.007 1.742-3.064-.952-1.408-2.437-1.56-2.951-1.598zm7.645-2.76v14.834h2.305v-5.072h3.19c2.913 0 4.96-1.998 4.96-4.89 0-2.893-2.01-4.872-4.885-4.872h-5.57zm2.305 1.941h2.656c2 0 3.142 1.066 3.142 2.94 0 1.875-1.142 2.95-3.151 2.95h-2.647v-5.89zM32.673 16.08c1.448 0 2.79-.733 3.4-1.893h.047v1.779h2.133V8.582c0-2.14-1.714-3.52-4.351-3.52-2.447 0-4.256 1.399-4.323 3.32h2.076c.171-.913 1.018-1.512 2.18-1.512 1.41 0 2.2.656 2.2 1.865v.818l-2.876.171c-2.675.162-4.123 1.256-4.123 3.159 0 1.922 1.495 3.197 3.637 3.197zm.62-1.76c-1.229 0-2.01-.59-2.01-1.494 0-.933.752-1.475 2.19-1.56l2.562-.162v.837c0 1.39-1.181 2.379-2.743 2.379zM41.1 20c2.247 0 3.304-.856 4.227-3.454l4.047-11.341h-2.342l-2.714 8.763h-.047l-2.714-8.763h-2.409l3.904 10.799-.21.656c-.352 1.114-.923 1.542-1.942 1.542-.18 0-.533-.02-.676-.038v1.779c.133.038.705.057.876.057z"></path>
				  </svg>
				</button>
		
				<div class="relative mt-8">
				  <div class="absolute inset-0 flex items-center" aria-hidden="true">
					<div class="w-full border-t border-gray-200"></div>
				  </div>
				  <div class="relative flex justify-center">
					<span class="px-4 text-sm font-medium text-gray-500 bg-white">or</span>
				  </div>
				</div> #}
		<form method="post" action="" x-data x-validate @submit="$validate.submit; if(!$validate.isComplete($el)){delete $refs.submit.dataset.processing}" >
			{{ csrfInput() }}
			{{ actionInput('commerce/cart/update-cart') }}
			{{ redirectInput(parseEnv(baseUrl)~'/shipping') }}
			{{ successMessageInput('Info updated.') }}
			<input type="hidden" name="recaptchaResponse" id="recaptchaResponse">
				<fieldset class="mb-8">
					<div class="flex items-center justify-between">
						<legend class="text-xl">Contact</legend>
						<p class="text-sm text-gray-600">Have an account? <a href="{{ loginUrl~'?redirect=checkout' }}" class="hover:text-black">Log in</a></p>
					</div>
					
					<div class="grid gap-3 mt-4">
						{{ include('checkout/includes/inputs/text', {
							name: 'email',
							label: 'Email',
							value: cart.email ?? currentUser.email ?? null,
							required: true,
						}) }}
						
						{{ include('checkout/includes/inputs/checkbox', {
							name: 'newsletter',
							label: 'Email me with news and offers',
						}) }}
					</div>
				</fieldset>
				
				<fieldset class="mb-8">
					<div class="flex items-center justify-between mb-4">
						<legend class="text-xl">Shipping address</legend>
					</div>
					
					{{ include('checkout/includes/address', {namespace:'shippingAddress'}) }}
				</fieldset>
				
				
				<fieldset class="mb-8">
					<div class="">
						<legend class="text-xl">Billing address</legend>
						<p class="text-sm text-gray-600">Select the address that matches your card or payment method.</p>
					</div>
					
					<div class="mt-6 overflow-hidden border border-gray-300 divide-y divide-gray-300 rounded-md" x-data="{ sameAddress: {{ cart.isBillingSameAsShipping ? 1:0 }} }">
						
						<label class="relative flex items-start gap-3 p-3 text-sm">
						  <input x-model="sameAddress" value="1" name="billingAddressSameAsShipping" type="radio" checked class="mt-0.5 h-4 w-4 border-gray-300 text-brand focus:ring-brand">
							<div class="flex-1 text-gray-600">Same as shipping address</div>
						</label>
						<label class="relative flex items-start gap-3 p-3 text-sm">
						  <input x-model="sameAddress" value="0" name="billingAddressSameAsShipping" type="radio" class="mt-0.5 h-4 w-4 border-gray-300 text-brand focus:ring-brand">
							<div class="flex-1 text-gray-600">Use a different address</div>
						</label>
						
						<div x-show="sameAddress == 0" x-collapse class="p-3 bg-gray-50" style="display:none;">
							{{ include('checkout/includes/address', {namespace:'billingAddress', attrs:[':disabled="sameAddress == 1"']}) }}
						</div>
						
					  </div>
					
					
				</fieldset>
		
				<div class="flex items-center justify-between">
					<a href="{{ siteUrl(parseEnv(cartUrl)) }}" class="flex items-center text-sm text-gray-500"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4 mr-1">
						  <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
						</svg>
 Return to cart</a>
					{{ include("checkout/includes/inputs/button", {icon:"arrow-right"}) }}
				</div>
				
		</form>
				
{% endblock %}

{# ======================================================================= #}

{# Currently there is a places search functionality on both the addressLine1 for shipping as
well as the billing addressLine1 fields, so if the shipping and billing addresses are different
then you can still use the quick address search in both places. Also if billing and shipping are 
the same, then both are populated with the shipping address entered #}

{% js 'https://maps.googleapis.com/maps/api/js?key='~ (parseEnv(mapsApiKey)) ~'&callback=initAutocomplete&libraries=places&v=weekly' %}

{% js at head %}

	let autocomplete;
	let billingAutocomplete;
	let address1Field;
	let address2Field;
	let postalField;
	let billingAddress1Field;
	let billingAddress2Field;
	let billingPostalField;
	let sameAddressRadioButton;

	function initAutocomplete() {
		address1Field = document.querySelector("#shippingAddress-addressLine1");
		address2Field = document.querySelector("#shippingAddress-addressLine2");
		postalField = document.querySelector("#shippingAddress-postalCode");

		billingAddress1Field = document.querySelector("#billingAddress-addressLine1");
		billingAddress2Field = document.querySelector("#billingAddress-addressLine2");
		billingPostalField = document.querySelector("#billingAddress-postalCode");

		sameAddressRadioButton = document.querySelector("#sameAddress");

		autocomplete = new google.maps.places.Autocomplete(address1Field, {
			componentRestrictions: { country: ["us"] },
			fields: ["address_components", "geometry"],
			types: ["address"],
		});

		billingAutocomplete = new google.maps.places.Autocomplete(billingAddress1Field, {
			componentRestrictions: { country: ["us"] },
			fields: ["address_components", "geometry"],
			types: ["address"],
		});

		address1Field.focus();
		autocomplete.addListener("place_changed", fillInAddress);
		billingAutocomplete.addListener("place_changed", fillInBillingAddress);

		// Add listener for the radio button
		sameAddressRadioButton.addEventListener("change", handleSameAddressChange);
	}

	function fillInAddress() {
		const place = autocomplete.getPlace();
		let address1 = "";
		let postcode = "";

		for (const component of place.address_components) {
			const componentType = component.types[0];

			switch (componentType) {
				case "street_number": {
					address1 = `${component.long_name} ${address1}`;
					break;
				}

				case "route": {
					address1 += component.short_name;
					break;
				}

				case "postal_code": {
					postcode = `${component.long_name}${postcode}`;
					break;
				}

				case "postal_code_suffix": {
					postcode = `${postcode}-${component.long_name}`;
					break;
				}
				case "locality":
					document.querySelector("#shippingAddress-locality").value = component.long_name;
					break;
				case "administrative_area_level_1": {
					document.querySelector("#shippingAddress-administrativeArea").value = component.short_name;
					break;
				}
			}
		}

		address1Field.value = address1;
		postalField.value = postcode;
		address2Field.focus();

		// Populate billing address if radio button is checked
		if (sameAddressRadioButton.checked) {
			fillInBillingAddressFields(address1, postcode);
		}
	}

	function fillInBillingAddress() {
		const place = billingAutocomplete.getPlace();
		let address1 = "";
		let postcode = "";

		for (const component of place.address_components) {
			const componentType = component.types[0];

			switch (componentType) {
				case "street_number": {
					address1 = `${component.long_name} ${address1}`;
					break;
				}

				case "route": {
					address1 += component.short_name;
					break;
				}

				case "postal_code": {
					postcode = `${component.long_name}${postcode}`;
					break;
				}

				case "postal_code_suffix": {
					postcode = `${postcode}-${component.long_name}`;
					break;
				}
				case "locality":
					document.querySelector("#billingAddress-locality").value = component.long_name;
					break;
				case "administrative_area_level_1": {
					document.querySelector("#billingAddress-administrativeArea").value = component.short_name;
					break;
				}
			}
		}

		billingAddress1Field.value = address1;
		billingPostalField.value = postcode;
		billingAddress2Field.focus();
	}

	function fillInBillingAddressFields(address1, postcode) {
		billingAddress1Field.value = address1;
		billingPostalField.value = postcode;
		document.querySelector("#billingAddress-locality").value = document.querySelector("#shippingAddress-locality").value;
		document.querySelector("#billingAddress-administrativeArea").value = document.querySelector("#shippingAddress-administrativeArea").value;
		billingAddress2Field.focus();
	}

	function handleSameAddressChange() {
		if (sameAddressRadioButton.checked) {
			// Copy the current values from shipping to billing
			fillInBillingAddressFields(address1Field.value, postalField.value);
		} else {
			// Clear the billing fields if the radio button is unchecked
			billingAddress1Field.value = "";
			billingAddress2Field.value = "";
			billingPostalField.value = "";
			document.querySelector("#billingAddress-locality").value = "";
			document.querySelector("#billingAddress-administrativeArea").value = "";
		}
	}

	window.initAutocomplete = initAutocomplete;
{% endjs %}